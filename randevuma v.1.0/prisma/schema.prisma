// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // Prisma sadece şemayı okurken buraya bakıyor. Runtime'da adapter'i (lib/db.ts) kullanıyoruz.
  url      = env("PRISMA_DB_FILE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businesses Business[]
}

model Business {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  address     String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  services      Service[]
  staff         Staff[]
  appointments  Appointment[]
  workingHours  WorkingHours[]

  @@index([slug])
  @@index([userId])
}

model Service {
  id           String   @id @default(cuid())
  name         String
  description  String?
  durationMin  Int
  price        Float
  bufferBefore Int      @default(0)
  bufferAfter  Int      @default(0)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  appointments Appointment[]
  skills       StaffSkill[]

  @@index([businessId])
}

model Staff {
  id        String   @id @default(cuid())
  name      String
  slug      String   // NOT NULL by default in Prisma
  email     String?
  phone     String?
  title     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  appointments Appointment[]
  skills       StaffSkill[]
  timeOffs     StaffTimeOff[]

  @@unique([businessId, slug])
  @@index([slug])
  @@index([businessId])
}

model WorkingHours {
  id        String   @id @default(cuid())
  weekday   Int
  openMin   Int
  closeMin  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, weekday])
  @@index([businessId])
  @@index([weekday])
}

model Appointment {
  id            String   @id @default(cuid())
  customerName  String
  customerTel   String
  customerEmail String?
  startAt       DateTime
  endAt         DateTime
  status        String   @default("booked")
  note          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  staffId String
  staff   Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, startAt])
  @@index([businessId])
  @@index([serviceId])
  @@index([staffId])
  @@index([startAt])
  @@index([businessId, staffId, startAt])
}

model StaffSkill {
  id        String   @id @default(cuid())
  staffId   String
  serviceId String
  createdAt DateTime @default(now())

  staff   Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([staffId, serviceId])
  @@index([staffId])
  @@index([serviceId])
}

model StaffTimeOff {
  id        String   @id @default(cuid())
  staffId   String
  startAt   DateTime
  endAt     DateTime
  reason    String?
  createdAt DateTime @default(now())

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId])
  @@index([startAt, endAt])
}

model AppointmentHold {
  id         String   @id @default(cuid())
  businessId String
  staffId    String
  startAt    DateTime
  endAt      DateTime
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([businessId, staffId, startAt])
}

model Ban {
  id          String   @id @default(cuid())
  businessId  String
  type        String   // "ip" | "phone" | "device"
  value       String   // IP address, phone number, or device ID
  reason      String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  createdBy   String?  // admin user ID

  @@unique([businessId, type, value])
  @@index([businessId, type, value])
  @@index([expiresAt])
}

model RiskLog {
  id          String   @id @default(cuid())
  businessId  String
  type        String   // "honeypot" | "ratelimit" | "quota" | "duplicate"
  ip          String?
  phone       String?
  deviceId    String?
  userAgent   String?
  path        String?
  createdAt   DateTime @default(now())

  @@index([businessId, createdAt])
  @@index([phone])
  @@index([ip])
}


